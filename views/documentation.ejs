<!DOCTYPE html>
<html lang="en">
<%- include('./partials/header') %>
<body>
  <div class="container my-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
      <h1>System Documentation</h1>
      <div>
        <span class="me-3">Logged in as: <%= user.username %></span>
        <a href="/dashboard" class="btn btn-primary me-2">Dashboard</a>
        <a href="/logout" class="btn btn-danger">Logout</a>
      </div>
    </div>

    <div class="row">
      <div class="col-md-3">
        <div class="list-group" id="doc-nav">
          <a href="#linux-user" class="list-group-item list-group-item-action">Setting Up Linux Users</a>
          <a href="#sudo-access" class="list-group-item list-group-item-action">Granting Sudo Privileges</a>
          <a href="#node-hosting" class="list-group-item list-group-item-action">Hosting Node Applications</a>
          <a href="#security-threats" class="list-group-item list-group-item-action">Common Security Threats</a>
          <a href="#authentication" class="list-group-item list-group-item-action">Authentication & Authorization</a>
          <a href="#er-diagram" class="list-group-item list-group-item-action">ER Diagram</a>
          <a href="#network-diagram" class="list-group-item list-group-item-action">Network Diagram</a>
          <a href="#ip-plan" class="list-group-item list-group-item-action">IP Plan</a>
          <a href="#project-plan" class="list-group-item list-group-item-action">Project Plan</a>
        </div>
      </div>
      
      <div class="col-md-9">
        <!-- Linux User Setup Section -->
        <section id="linux-user" class="mb-5">
          <div class="card">
            <div class="card-header bg-primary text-white">
              <h2 class="h4 mb-0">Setting Up a New Linux User with SSH Key Authentication</h2>
            </div>
            <div class="card-body">
              <h3 class="h5">Step 1: Create a new user</h3>
              <div class="bg-light p-3 mb-4 rounded">
                <pre><code>sudo adduser username</code></pre>
              </div>
              <p>Follow the prompts to set a password and user information.</p>
              
              <h3 class="h5">Step 2: Switch to the new user</h3>
              <div class="bg-light p-3 mb-4 rounded">
                <pre><code>su - username</code></pre>
              </div>
              
              <h3 class="h5">Step 3: Set up SSH directory</h3>
              <div class="bg-light p-3 mb-4 rounded">
                <pre><code>mkdir -p ~/.ssh
chmod 700 ~/.ssh
touch ~/.ssh/authorized_keys
chmod 600 ~/.ssh/authorized_keys</code></pre>
              </div>
              
              <h3 class="h5">Step 4: Add public key to authorized_keys</h3>
              <div class="bg-light p-3 mb-4 rounded">
                <pre><code>echo "ssh-rsa AAAAB3NzaC1y...user@example.com" >> ~/.ssh/authorized_keys</code></pre>
              </div>
              <p>Replace the SSH key with the user's actual public key.</p>
              
              <h3 class="h5">Step 5: Test the connection</h3>
              <p>The user should now be able to connect using their SSH key without a password:</p>
              <div class="bg-light p-3 mb-4 rounded">
                <pre><code>ssh username@server_ip</code></pre>
              </div>
              
              <div class="alert alert-info">
                <h4 class="h5">Security Benefits</h4>
                <p>SSH key authentication is more secure than password authentication because:</p>
                <ul>
                  <li>Keys are significantly more difficult to brute force than passwords</li>
                  <li>Private keys never leave the client computer</li>
                  <li>Two factors are required: possession of the key file and knowledge of the key's passphrase (if set)</li>
                </ul>
              </div>
              
              <div class="text-center mb-3">
                <img src="https://via.placeholder.com/800x400" alt="SSH Key Authentication Flow" class="img-fluid border rounded">
                <p class="text-muted mt-2">SSH Key Authentication Flow</p>
              </div>
            </div>
          </div>
        </section>
        
        <!-- Sudo Rights Section -->
        <section id="sudo-access" class="mb-5">
          <div class="card">
            <div class="card-header bg-primary text-white">
              <h2 class="h4 mb-0">Granting Sudo Privileges to a User</h2>
            </div>
            <div class="card-body">
              <h3 class="h5">Method 1: Add user to sudo group</h3>
              <div class="bg-light p-3 mb-4 rounded">
                <pre><code>sudo usermod -aG sudo username</code></pre>
              </div>
              <p>This adds the user to the sudo group, giving them sudo privileges.</p>
              
              <h3 class="h5">Method 2: Edit sudoers file</h3>
              <div class="bg-light p-3 mb-4 rounded">
                <pre><code>sudo visudo</code></pre>
              </div>
              <p>Add the following line to grant full sudo access:</p>
              <div class="bg-light p-3 mb-4 rounded">
                <pre><code>username ALL=(ALL:ALL) ALL</code></pre>
              </div>
              <p>Or, to allow sudo without password (less secure):</p>
              <div class="bg-light p-3 mb-4 rounded">
                <pre><code>username ALL=(ALL:ALL) NOPASSWD:ALL</code></pre>
              </div>
              
              <h3 class="h5">Testing sudo access</h3>
              <p>To verify the user has sudo access:</p>
              <div class="bg-light p-3 mb-4 rounded">
                <pre><code>su - username
sudo ls -la /root</code></pre>
              </div>
              
              <div class="alert alert-warning">
                <h4 class="h5">Security Warning</h4>
                <p>Only grant sudo privileges to trusted users. Users with sudo access can make system-wide changes that could compromise security or system stability.</p>
              </div>
              
              <div class="text-center mb-3">
                <img src="https://via.placeholder.com/800x400" alt="Sudo Access Diagram" class="img-fluid border rounded">
                <p class="text-muted mt-2">Sudo Access Management Diagram</p>
              </div>
            </div>
          </div>
        </section>
        
        <!-- Node.js Hosting Section -->
        <section id="node-hosting" class="mb-5">
          <div class="card">
            <div class="card-header bg-primary text-white">
              <h2 class="h4 mb-0">Hosting a Node.js Application</h2>
            </div>
            <div class="card-body">
              <h3 class="h5">Step 1: Install Node.js and npm</h3>
              <div class="bg-light p-3 mb-4 rounded">
                <pre><code>curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
sudo apt install -y nodejs</code></pre>
              </div>
              
              <h3 class="h5">Step 2: Install PM2 for process management</h3>
              <div class="bg-light p-3 mb-4 rounded">
                <pre><code>sudo npm install -g pm2</code></pre>
              </div>
              
              <h3 class="h5">Step 3: Clone your application</h3>
              <div class="bg-light p-3 mb-4 rounded">
                <pre><code>git clone https://github.com/username/your-node-app.git
cd your-node-app</code></pre>
              </div>
              
              <h3 class="h5">Step 4: Install dependencies</h3>
              <div class="bg-light p-3 mb-4 rounded">
                <pre><code>npm install</code></pre>
              </div>
              
              <h3 class="h5">Step 5: Create .env file</h3>
              <div class="bg-light p-3 mb-4 rounded">
                <pre><code>nano .env

# Add environment variables like:
PORT=3000
MONGODB_URI=mongodb://localhost:27017/your-database
SESSION_SECRET=your-session-secret</code></pre>
              </div>
              
              <h3 class="h5">Step 6: Start the application with PM2</h3>
              <div class="bg-light p-3 mb-4 rounded">
                <pre><code>pm2 start app.js --name "your-app-name"
pm2 save
pm2 startup</code></pre>
              </div>
              <p>Follow the instructions from PM2 to set up startup scripts.</p>
              
              <h3 class="h5">Step 7: Set up Nginx as a reverse proxy (optional)</h3>
              <div class="bg-light p-3 mb-4 rounded">
                <pre><code>sudo apt install nginx
sudo nano /etc/nginx/sites-available/your-app-name</code></pre>
              </div>
              <p>Add the following Nginx configuration:</p>
              <div class="bg-light p-3 mb-4 rounded">
                <pre><code>server {
    listen 80;
    server_name your-domain.com www.your-domain.com;

    location / {
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
}</code></pre>
              </div>
              <p>Enable the site and restart Nginx:</p>
              <div class="bg-light p-3 mb-4 rounded">
                <pre><code>sudo ln -s /etc/nginx/sites-available/your-app-name /etc/nginx/sites-enabled/
sudo nginx -t
sudo systemctl restart nginx</code></pre>
              </div>
              
              <div class="alert alert-info">
                <h4 class="h5">Useful PM2 Commands</h4>
                <ul>
                  <li><code>pm2 list</code> - List all running applications</li>
                  <li><code>pm2 logs</code> - Display logs for all applications</li>
                  <li><code>pm2 restart your-app-name</code> - Restart an application</li>
                  <li><code>pm2 stop your-app-name</code> - Stop an application</li>
                  <li><code>pm2 delete your-app-name</code> - Delete an application from PM2</li>
                </ul>
              </div>
              
              <div class="text-center mb-3">
                <img src="https://via.placeholder.com/800x400" alt="Node.js Application Architecture" class="img-fluid border rounded">
                <p class="text-muted mt-2">Node.js Application Deployment Architecture</p>
              </div>
            </div>
          </div>
        </section>
        
        <!-- Security Threats Section -->
        <section id="security-threats" class="mb-5">
          <div class="card">
            <div class="card-header bg-primary text-white">
              <h2 class="h4 mb-0">Common Security Threats and Protection Measures</h2>
            </div>
            <div class="card-body">
              <h3 class="h5">1. SQL Injection Attacks</h3>
              <p>SQL injection occurs when untrusted data is sent to an interpreter as part of a command or query.</p>
              <div class="row mb-4">
                <div class="col-md-6">
                  <div class="card h-100">
                    <div class="card-header bg-danger text-white">Vulnerable Code</div>
                    <div class="card-body">
                      <pre><code>const query = `SELECT * FROM users WHERE username = '${req.body.username}'`;</code></pre>
                    </div>
                  </div>
                </div>
                <div class="col-md-6">
                  <div class="card h-100">
                    <div class="card-header bg-success text-white">Protected Code</div>
                    <div class="card-body">
                      <pre><code>// Using parameterized queries or ORM like Mongoose
User.findOne({ username: req.body.username });</code></pre>
                    </div>
                  </div>
                </div>
              </div>
              
              <h3 class="h5">2. Cross-Site Scripting (XSS)</h3>
              <p>XSS allows attackers to inject client-side scripts into web pages viewed by other users.</p>
              <div class="row mb-4">
                <div class="col-md-6">
                  <div class="card h-100">
                    <div class="card-header bg-danger text-white">Vulnerable Code</div>
                    <div class="card-body">
                      <pre><code>app.get('/search', (req, res) => {
  res.send(`Search results for: ${req.query.term}`);
});</code></pre>
                    </div>
                  </div>
                </div>
                <div class="col-md-6">
                  <div class="card h-100">
                    <div class="card-header bg-success text-white">Protected Code</div>
                    <div class="card-body">
                      <pre><code>const escapeHtml = require('escape-html');
app.get('/search', (req, res) => {
  res.send(`Search results for: ${escapeHtml(req.query.term)}`);
});</code></pre>
                    </div>
                  </div>
                </div>
              </div>
              
              <h3 class="h5">3. Cross-Site Request Forgery (CSRF)</h3>
              <p>CSRF tricks a user's browser into executing unwanted actions on a site where they're authenticated.</p>
              <p><strong>Protection:</strong> Use CSRF tokens, SameSite cookies, and verify request origins.</p>
              
              <h3 class="h5">4. Brute Force Attacks</h3>
              <p>Attackers systematically attempt all possible passwords until finding the correct one.</p>
              <p><strong>Protection:</strong> Implement rate limiting, account lockouts, and CAPTCHA systems.</p>
              
              <h3 class="h5">5. Distributed Denial of Service (DDoS)</h3>
              <p>Attackers flood a server with traffic to make it unavailable to users.</p>
              <p><strong>Protection:</strong> Use CDNs, rate limiting, and cloud-based DDoS protection services.</p>
              
              <h3 class="h5">6. Man-in-the-Middle (MITM) Attacks</h3>
              <p>Attackers intercept communication between two parties to steal data or impersonate one party.</p>
              <p><strong>Protection:</strong> Use HTTPS with valid certificates, HSTS, and secure cookie flags.</p>
              
              <h3 class="h5">7. Server Misconfiguration</h3>
              <p>Improperly configured servers can expose sensitive information or allow unauthorized access.</p>
              <p><strong>Protection:</strong> Regular security audits, hardening guides, and least privilege principle.</p>
              
              <div class="alert alert-warning mt-4">
                <h4 class="h5">Essential Security Best Practices</h4>
                <ul>
                  <li>Keep all software up-to-date with security patches</li>
                  <li>Use strong, unique passwords and enable MFA where possible</li>
                  <li>Implement proper input validation and sanitization</li>
                  <li>Follow the principle of least privilege for users and processes</li>
                  <li>Set up proper logging and monitoring for suspicious activities</li>
                  <li>Regularly backup critical data</li>
                  <li>Use a Web Application Firewall (WAF) for additional protection</li>
                </ul>
              </div>
              
              <div class="text-center mb-3">
                <img src="https://via.placeholder.com/800x400" alt="Common Web Application Attacks" class="img-fluid border rounded">
                <p class="text-muted mt-2">Common Web Application Attack Vectors</p>
              </div>
            </div>
          </div>
        </section>
        
        <!-- Authentication & Authorization Section -->
        <section id="authentication" class="mb-5">
          <div class="card">
            <div class="card-header bg-primary text-white">
              <h2 class="h4 mb-0">Authentication and Authorization: Why They Matter</h2>
            </div>
            <div class="card-body">
              <h3 class="h5">Understanding the Difference</h3>
              <div class="row mb-4">
                <div class="col-md-6">
                  <div class="card h-100">
                    <div class="card-header bg-info text-white">Authentication</div>
                    <div class="card-body">
                      <p><strong>Verifies WHO you are</strong></p>
                      <p>Authentication is the process of verifying the identity of a user, system, or entity. It answers the question: "Are you who you claim to be?"</p>
                      <p><strong>Examples:</strong> Username/password login, biometric verification, multi-factor authentication</p>
                    </div>
                  </div>
                </div>
                <div class="col-md-6">
                  <div class="card h-100">
                    <div class="card-header bg-info text-white">Authorization</div>
                    <div class="card-body">
                      <p><strong>Determines WHAT you can do</strong></p>
                      <p>Authorization is the process of determining whether an authenticated user has permission to access a specific resource or perform a particular action.</p>
                      <p><strong>Examples:</strong> Role-based access control, permission levels, access control lists</p>
                    </div>
                  </div>
                </div>
              </div>
              
              <h3 class="h5">Why Authentication is Critical for Our Todo App</h3>
              <div class="alert alert-info mb-4">
                <p>Authentication in our todo application ensures that:</p>
                <ul>
                  <li><strong>Data Privacy:</strong> Users can only see their own tasks, protecting sensitive information</li>
                  <li><strong>Accountability:</strong> Actions can be tracked to specific users, creating an audit trail</li>
                  <li><strong>Personalization:</strong> The app can provide customized experiences for each user</li>
                  <li><strong>Security:</strong> Prevents unauthorized access to user accounts and data</li>
                </ul>
              </div>
              
              <h3 class="h5">Why Authorization is Essential for Our Todo App</h3>
              <div class="alert alert-info mb-4">
                <p>Authorization in our application ensures that:</p>
                <ul>
                  <li><strong>Data Integrity:</strong> Users can only modify their own tasks, preventing accidental or malicious changes</li>
                  <li><strong>Administrative Control:</strong> Admin users have access to documentation and system functions</li>
                  <li><strong>Principle of Least Privilege:</strong> Users only have access to the minimum functionality needed</li>
                  <li><strong>Compliance:</strong> Helps meet regulatory requirements for data access and protection</li>
                </ul>
              </div>
              
              <h3 class="h5">Implementation in Our Todo App</h3>
              <p>Our application implements both authentication and authorization:</p>
              <div class="bg-light p-3 mb-4 rounded">
                <pre><code>// Authentication middleware
const isAuth = (req, res, next) => {
  if (req.session.userId) {
    next();
  } else {
    res.redirect('/login');
  }
};

// Authorization middleware for task operations
router.delete('/:id', isAuth, async (req, res) => {
  const task = await Task.findById(req.params.id);
  
  // Verify user is authorized to delete this task
  if (task.user.toString() !== req.session.userId) {
    return res.status(403).json({ error: 'Not authorized' });
  }
  
  // Proceed with deletion
  await Task.findByIdAndDelete(req.params.id);
  res.json({ message: 'Task deleted' });
});</code></pre>
              </div>
              
              <h3 class="h5">Best Practices We Follow</h3>
              <ul>
                <li><strong>Secure Password Storage:</strong> Passwords are hashed, not stored in plaintext</li>
                <li><strong>Session Management:</strong> Proper session handling with secure cookies</li>
                <li><strong>HTTPS:</strong> All communications are encrypted via HTTPS</li>
                <li><strong>Access Control:</strong> Granular permissions based on user roles</li>
                <li><strong>Validation:</strong> Server-side validation of all requests regardless of client-side checks</li>
              </ul>
              
              <div class="text-center mb-3">
                <img src="https://via.placeholder.com/800x400" alt="Authentication and Authorization Flow" class="img-fluid border rounded">
                <p class="text-muted mt-2">Authentication and Authorization Flow in Web Applications</p>
              </div>
            </div>
          </div>
        </section>
        
        <!-- ER Diagram Section -->
        <section id="er-diagram" class="mb-5">
          <div class="card">
            <div class="card-header bg-primary text-white">
              <h2 class="h4 mb-0">ER Diagram</h2>
            </div>
            <div class="card-body">
              <p>This Entity Relationship diagram illustrates the database structure of our "Fiks ferdig" Todo application:</p>
              
              <!-- Add Mermaid script for rendering diagrams -->
              <script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"></script>
              <script>
                mermaid.initialize({ startOnLoad: true });
              </script>
              
              <div class="mermaid">
                erDiagram
                  USER {
                    string _id PK
                    string username
                    string password
                    boolean isAdmin
                    date createdAt
                  }
                  
                  TASK {
                    string _id PK
                    string title
                    string description
                    boolean completed
                    string dayOfWeek
                    string user FK
                    boolean isRecurring
                    date createdAt
                  }
                  
                  USER ||--o{ TASK : creates
              </div>
              
              <div class="mt-4">
                <h3 class="h5">Database Structure Explanation</h3>
                <p>Our application uses a MongoDB database with two main collections:</p>
                
                <h4 class="h6">User Collection</h4>
                <ul>
                  <li><strong>_id:</strong> Unique MongoDB document identifier</li>
                  <li><strong>username:</strong> User's login name (unique)</li>
                  <li><strong>password:</strong> Hashed password for authentication</li>
                  <li><strong>isAdmin:</strong> Boolean flag indicating administrator privileges</li>
                  <li><strong>createdAt:</strong> Timestamp when the user account was created</li>
                </ul>
                
                <h4 class="h6">Task Collection</h4>
                <ul>
                  <li><strong>_id:</strong> Unique MongoDB document identifier</li>
                  <li><strong>title:</strong> Name/title of the task</li>
                  <li><strong>description:</strong> Detailed description of the task (optional)</li>
                  <li><strong>completed:</strong> Boolean indicating task completion status</li>
                  <li><strong>dayOfWeek:</strong> Day when the task appears (monday through sunday)</li>
                  <li><strong>user:</strong> Reference to the User who created the task (foreign key)</li>
                  <li><strong>isRecurring:</strong> Boolean indicating if the task repeats weekly</li>
                  <li><strong>createdAt:</strong> Timestamp when the task was created</li>
                </ul>
                
                <h4 class="h6">Relationships</h4>
                <p>The diagram shows a one-to-many relationship between User and Task entities:</p>
                <ul>
                  <li>One User can create many Tasks (indicated by the crow's foot notation)</li>
                  <li>Each Task belongs to exactly one User</li>
                </ul>
              </div>
            </div>
          </div>
        </section>
        
        <!-- Network Diagram Section -->
        <section id="network-diagram" class="mb-5">
          <div class="card">
            <div class="card-header bg-primary text-white">
              <h2 class="h4 mb-0">Network Diagram</h2>
            </div>
            <div class="card-body">
              <p>This network diagram illustrates the infrastructure architecture of our "Fiks ferdig" Todo application:</p>
              
              <div class="mermaid">
                flowchart TD
                  subgraph Internet
                    Client[Client Browser]
                  end
                  
                  subgraph VPS[Virtual Private Server]
                    subgraph DMZ[DMZ Network - 192.168.1.0/24]
                      Firewall[Firewall/Router]
                      Nginx[Nginx Reverse Proxy\n192.168.1.10]
                    end
                    
                    subgraph AppNet[Application Network - 192.168.2.0/24]
                      NodeApp[Node.js App Server\n192.168.2.10]
                    end
                    
                    subgraph DataNet[Database Network - 192.168.3.0/24]
                      MongoDB[MongoDB Server\n192.168.3.10]
                    end
                  end
                  
                  Client <--> |HTTPS:443| Firewall
                  Firewall <--> |HTTP:80,HTTPS:443| Nginx
                  Nginx <--> |HTTP:3000| NodeApp
                  NodeApp <--> |MongoDB:27017| MongoDB
                  
                  classDef publicNet fill:#ffcccc
                  classDef dmzNet fill:#ffffcc
                  classDef appNet fill:#ccffcc
                  classDef dataNet fill:#ccccff
                  
                  class Client publicNet
                  class Firewall,Nginx dmzNet
                  class NodeApp appNet
                  class MongoDB dataNet
              </div>
              
              <div class="mt-4">
                <h3 class="h5">Network Architecture Explanation</h3>
                <p>Our application is deployed using a secure multi-tier architecture:</p>
                
                <h4 class="h6">Network Segmentation</h4>
                <ul>
                  <li><strong>DMZ Network (192.168.1.0/24):</strong> Contains internet-facing components with restricted access to internal networks</li>
                  <li><strong>Application Network (192.168.2.0/24):</strong> Hosts the Node.js application server, isolated from direct internet access</li>
                  <li><strong>Database Network (192.168.3.0/24):</strong> Contains the MongoDB database server, with the most restricted access</li>
                </ul>
                
                <h4 class="h6">Key Components</h4>
                <ul>
                  <li><strong>Firewall/Router:</strong> Controls traffic between network segments, implements access control lists</li>
                  <li><strong>Nginx Reverse Proxy:</strong> Handles HTTPS termination, load balancing, and forwards requests to application servers</li>
                  <li><strong>Node.js App Server:</strong> Runs the Express.js application that handles business logic and API requests</li>
                  <li><strong>MongoDB Server:</strong> Stores application data in a secure, isolated network segment</li>
                </ul>
                
                <h4 class="h6">Traffic Flow</h4>
                <p>The diagram illustrates the following traffic flow:</p>
                <ol>
                  <li>Client browsers connect to the firewall via HTTPS (port 443)</li>
                  <li>The firewall forwards legitimate traffic to the Nginx reverse proxy</li>
                  <li>Nginx routes requests to the Node.js application server on port 3000</li>
                  <li>The Node.js application communicates with the MongoDB server on port 27017</li>
                </ol>
                
                <h4 class="h6">Security Benefits</h4>
                <p>This architecture provides several security advantages:</p>
                <ul>
                  <li>Defense in depth through network segmentation</li>
                  <li>Limited attack surface with controlled access between tiers</li>
                  <li>Database isolated from direct internet access</li>
                  <li>TLS encryption for all client-server communication</li>
                </ul>
              </div>
            </div>
          </div>
        </section>
        
        <!-- IP Plan Section -->
        <section id="ip-plan" class="mb-5">
          <div class="card">
            <div class="card-header bg-primary text-white">
              <h2 class="h4 mb-0">IP Plan</h2>
            </div>
            <div class="card-body">
              <h3 class="h5">Network Overview</h3>
              <p>This IP plan outlines the network architecture for the "Fiks ferdig" Todo application, providing a structured approach to network segmentation, security, and scalability.</p>
              
              <h3 class="h5">Network Segmentation</h3>
              <p>The network is divided into three key segments to enhance security through isolation:</p>
              
              <div class="table-responsive mb-4">
                <table class="table table-bordered">
                  <thead class="table-light">
                    <tr>
                      <th>Network</th>
                      <th>CIDR Range</th>
                      <th>Purpose</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td>DMZ Network</td>
                      <td>192.168.1.0/24</td>
                      <td>External-facing services (Nginx, load balancers)</td>
                    </tr>
                    <tr>
                      <td>Application Network</td>
                      <td>192.168.2.0/24</td>
                      <td>Application servers (Node.js)</td>
                    </tr>
                    <tr>
                      <td>Database Network</td>
                      <td>192.168.3.0/24</td>
                      <td>Database servers (MongoDB)</td>
                    </tr>
                  </tbody>
                </table>
              </div>
              
              <h3 class="h5">IP Address Allocation</h3>
              
              <h4 class="h6">DMZ Network (192.168.1.0/24)</h4>
              <div class="table-responsive mb-4">
                <table class="table table-bordered">
                  <thead class="table-light">
                    <tr>
                      <th>IP Address</th>
                      <th>Hostname</th>
                      <th>Description</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td>192.168.1.1</td>
                      <td>gateway.dmz.local</td>
                      <td>Network gateway</td>
                    </tr>
                    <tr>
                      <td>192.168.1.10</td>
                      <td>nginx.dmz.local</td>
                      <td>Nginx reverse proxy server</td>
                    </tr>
                    <tr>
                      <td>192.168.1.11</td>
                      <td>backup-nginx.dmz.local</td>
                      <td>Backup Nginx server (failover)</td>
                    </tr>
                    <tr>
                      <td>192.168.1.254</td>
                      <td>-</td>
                      <td>Reserved for network equipment</td>
                    </tr>
                  </tbody>
                </table>
              </div>
              
              <h4 class="h6">Application Network (192.168.2.0/24)</h4>
              <div class="table-responsive mb-4">
                <table class="table table-bordered">
                  <thead class="table-light">
                    <tr>
                      <th>IP Address</th>
                      <th>Hostname</th>
                      <th>Description</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td>192.168.2.1</td>
                      <td>gateway.app.local</td>
                      <td>Network gateway</td>
                    </tr>
                    <tr>
                      <td>192.168.2.10</td>
                      <td>app1.app.local</td>
                      <td>Primary Node.js application server</td>
                    </tr>
                    <tr>
                      <td>192.168.2.11</td>
                      <td>app2.app.local</td>
                      <td>Secondary Node.js application server (scaling)</td>
                    </tr>
                    <tr>
                      <td>192.168.2.254</td>
                      <td>-</td>
                      <td>Reserved for network equipment</td>
                    </tr>
                  </tbody>
                </table>
              </div>
              
              <h4 class="h6">Database Network (192.168.3.0/24)</h4>
              <div class="table-responsive mb-4">
                <table class="table table-bordered">
                  <thead class="table-light">
                    <tr>
                      <th>IP Address</th>
                      <th>Hostname</th>
                      <th>Description</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td>192.168.3.1</td>
                      <td>gateway.db.local</td>
                      <td>Network gateway</td>
                    </tr>
                    <tr>
                      <td>192.168.3.10</td>
                      <td>mongo1.db.local</td>
                      <td>Primary MongoDB server</td>
                    </tr>
                    <tr>
                      <td>192.168.3.11</td>
                      <td>mongo2.db.local</td>
                      <td>Secondary MongoDB server (replication)</td>
                    </tr>
                    <tr>
                      <td>192.168.3.254</td>
                      <td>-</td>
                      <td>Reserved for network equipment</td>
                    </tr>
                  </tbody>
                </table>
              </div>
              
              <h3 class="h5">Domain Name Configuration</h3>
              <div class="table-responsive mb-4">
                <table class="table table-bordered">
                  <thead class="table-light">
                    <tr>
                      <th>Domain</th>
                      <th>Target</th>
                      <th>Description</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td>eksamen.[yourname].ikt-fag.no</td>
                      <td>192.168.1.10</td>
                      <td>Main application domain</td>
                    </tr>
                    <tr>
                      <td>todo.[yourname].ikt-fag.no</td>
                      <td>192.168.1.10</td>
                      <td>Alternate application domain</td>
                    </tr>
                  </tbody>
                </table>
              </div>
              
              <h3 class="h5">Firewall Rules Overview</h3>
              
              <h4 class="h6">External Firewall (Internet → DMZ)</h4>
              <div class="table-responsive mb-4">
                <table class="table table-bordered">
                  <thead class="table-light">
                    <tr>
                      <th>Source</th>
                      <th>Destination</th>
                      <th>Port</th>
                      <th>Protocol</th>
                      <th>Action</th>
                      <th>Description</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td>Any</td>
                      <td>192.168.1.10</td>
                      <td>80</td>
                      <td>TCP</td>
                      <td>Allow</td>
                      <td>HTTP (redirected to HTTPS)</td>
                    </tr>
                    <tr>
                      <td>Any</td>
                      <td>192.168.1.10</td>
                      <td>443</td>
                      <td>TCP</td>
                      <td>Allow</td>
                      <td>HTTPS</td>
                    </tr>
                    <tr>
                      <td>Any</td>
                      <td>192.168.1.10</td>
                      <td>22</td>
                      <td>TCP</td>
                      <td>Allow</td>
                      <td>SSH (restricted to specific IPs)</td>
                    </tr>
                    <tr>
                      <td>Any</td>
                      <td>Any</td>
                      <td>Any</td>
                      <td>Any</td>
                      <td>Deny</td>
                      <td>Default deny rule</td>
                    </tr>
                  </tbody>
                </table>
              </div>
              
              <h3 class="h5">Network Expansion Plan</h3>
              <p>This IP plan allows for future expansion:</p>
              <ul>
                <li>The DMZ network can support up to 254 devices</li>
                <li>The Application network can be expanded to include additional app servers</li>
                <li>The Database network supports the addition of more database servers for sharding</li>
              </ul>
            </div>
          </div>
        </section>
        
        <!-- Project Plan Section -->
        <section id="project-plan" class="mb-5">
          <div class="card">
            <div class="card-header bg-primary text-white">
              <h2 class="h4 mb-0">Project Plan</h2>
            </div>
            <div class="card-body">
              <h3 class="h5">Project Overview</h3>
              <p>The "Fiks ferdig" Todo application is a web-based task management system that allows users to create, view, update, and delete their daily tasks. The application features user authentication, day-based task organization, and an admin-only documentation section.</p>
              
              <h3 class="h5">Project Timeline</h3>
              <div class="table-responsive mb-4">
                <table class="table table-bordered">
                  <thead class="table-light">
                    <tr>
                      <th>Phase</th>
                      <th>Start Date</th>
                      <th>End Date</th>
                      <th>Duration</th>
                      <th>Status</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td>Planning</td>
                      <td>May 30, 2023</td>
                      <td>May 30, 2023</td>
                      <td>4 hours</td>
                      <td>Completed</td>
                    </tr>
                    <tr>
                      <td>Development</td>
                      <td>May 30, 2023</td>
                      <td>May 31, 2023</td>
                      <td>16 hours</td>
                      <td>Completed</td>
                    </tr>
                    <tr>
                      <td>Testing</td>
                      <td>May 31, 2023</td>
                      <td>May 31, 2023</td>
                      <td>4 hours</td>
                      <td>Completed</td>
                    </tr>
                    <tr>
                      <td>Deployment</td>
                      <td>May 31, 2023</td>
                      <td>May 31, 2023</td>
                      <td>2 hours</td>
                      <td>Completed</td>
                    </tr>
                    <tr>
                      <td>Documentation</td>
                      <td>May 31, 2023</td>
                      <td>June 1, 2023</td>
                      <td>2 hours</td>
                      <td>Completed</td>
                    </tr>
                    <tr>
                      <td>Final Review</td>
                      <td>June 1, 2023</td>
                      <td>June 1, 2023</td>
                      <td>2 hours</td>
                      <td>Pending</td>
                    </tr>
                  </tbody>
                </table>
              </div>
              
              <h3 class="h5">Task Breakdown and Time Estimates</h3>
              
              <h4 class="h6">Planning Phase (4 hours)</h4>
              <ul>
                <li>Requirement analysis - 1 hour</li>
                <li>Database schema design - 1 hour</li>
                <li>UI/UX wireframing - 1 hour</li>
                <li>Technology stack selection - 0.5 hours</li>
                <li>Project setup and repository creation - 0.5 hours</li>
              </ul>
              
              <h4 class="h6">Development Phase (16 hours)</h4>
              <ol>
                <li><strong>Backend Development (8 hours)</strong>
                  <ul>
                    <li>Set up Express.js server - 0.5 hours</li>
                    <li>Configure MongoDB connection - 0.5 hours</li>
                    <li>Create User model and authentication routes - 2 hours</li>
                    <li>Create Task model and CRUD routes - 2 hours</li>
                    <li>Implement session management - 1 hour</li>
                    <li>Set up admin-only routes - 1 hour</li>
                    <li>Add security measures (validation, sanitization) - 1 hour</li>
                  </ul>
                </li>
                <li><strong>Frontend Development (8 hours)</strong>
                  <ul>
                    <li>Create base templates and layout - 1 hour</li>
                    <li>Implement login and registration pages - 1.5 hours</li>
                    <li>Develop dashboard with task list - 2 hours</li>
                    <li>Create task management UI (add, edit, delete) - 2 hours</li>
                    <li>Add responsive design elements - 1 hour</li>
                    <li>Implement client-side validation - 0.5 hours</li>
                  </ul>
                </li>
              </ol>
              
              <h4 class="h6">Testing Phase (4 hours)</h4>
              <ul>
                <li>Manual testing of all features - 2 hours</li>
                <li>Fix identified bugs and issues - 1.5 hours</li>
                <li>Performance optimization - 0.5 hours</li>
              </ul>
              
              <h3 class="h5">Risk Management</h3>
              <div class="table-responsive mb-4">
                <table class="table table-bordered">
                  <thead class="table-light">
                    <tr>
                      <th>Risk</th>
                      <th>Probability</th>
                      <th>Impact</th>
                      <th>Mitigation Strategy</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td>Database connection issues</td>
                      <td>Medium</td>
                      <td>High</td>
                      <td>Implement proper error handling and fallback mechanisms</td>
                    </tr>
                    <tr>
                      <td>Security vulnerabilities</td>
                      <td>Low</td>
                      <td>High</td>
                      <td>Follow security best practices, use input validation and authentication</td>
                    </tr>
                    <tr>
                      <td>Server downtime</td>
                      <td>Low</td>
                      <td>Medium</td>
                      <td>Configure monitoring and automatic restart mechanisms</td>
                    </tr>
                    <tr>
                      <td>Feature creep</td>
                      <td>Medium</td>
                      <td>Medium</td>
                      <td>Stick to the defined requirements, schedule additional features for future releases</td>
                    </tr>
                    <tr>
                      <td>Time constraints</td>
                      <td>High</td>
                      <td>High</td>
                      <td>Prioritize core features, use timeboxing to ensure completion of key functionality</td>
                    </tr>
                  </tbody>
                </table>
              </div>
              
              <h3 class="h5">Quality Assurance Checkpoints</h3>
              <ul>
                <li>Code follows consistent formatting and naming conventions</li>
                <li>All critical functions have proper error handling</li>
                <li>User inputs are properly validated and sanitized</li>
                <li>Authentication and authorization are properly implemented</li>
                <li>Application is responsive and works on different devices</li>
                <li>Documentation is clear and comprehensive</li>
              </ul>
            </div>
          </div>
        </section>
      </div>
    </div>
  </div>

  <script>
    // Initialize the first nav item as active if none is active
    document.addEventListener('DOMContentLoaded', function() {
      if (!document.querySelector('#doc-nav a.active')) {
        const firstNavItem = document.querySelector('#doc-nav a');
        if (firstNavItem) {
          firstNavItem.classList.add('active');
          // Scroll to the first section
          const targetId = firstNavItem.getAttribute('href');
          const targetElement = document.querySelector(targetId);
          if (targetElement) {
            window.scrollTo({
              top: targetElement.offsetTop - 20,
              behavior: 'smooth'
            });
          }
        }
      }
    });
    
    // Smooth scrolling for documentation navigation
    document.querySelectorAll('#doc-nav a').forEach(anchor => {
      anchor.addEventListener('click', function(e) {
        e.preventDefault();
        const targetId = this.getAttribute('href');
        const targetElement = document.querySelector(targetId);
        
        if (targetElement) {
          window.scrollTo({
            top: targetElement.offsetTop - 20,
            behavior: 'smooth'
          });
          
          // Update active state
          document.querySelectorAll('#doc-nav a').forEach(a => {
            a.classList.remove('active');
          });
          this.classList.add('active');
        }
      });
    });
    
    // Set active menu item based on scroll position
    window.addEventListener('scroll', function() {
      const sections = document.querySelectorAll('section');
      let currentSection = '';
      
      sections.forEach(section => {
        const sectionTop = section.offsetTop;
        const sectionHeight = section.clientHeight;
        
        if (pageYOffset >= sectionTop - 100 && 
            pageYOffset < sectionTop + sectionHeight - 100) {
          currentSection = '#' + section.getAttribute('id');
        }
      });
      
      if (currentSection) {
        document.querySelectorAll('#doc-nav a').forEach(a => {
          a.classList.remove('active');
          if (a.getAttribute('href') === currentSection) {
            a.classList.add('active');
          }
        });
      }
    });
  </script>
<%- include('./partials/footer') %>
</body>
</html>